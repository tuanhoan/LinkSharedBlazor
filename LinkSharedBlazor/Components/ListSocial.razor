@page "/social"
@inject SocialServices SocialServices

<div class="d-flex">
    <MudTextField Label="SocialName" 
                  @bind-Value="Social.SocialName" For="@(() => Social.SocialName)" />
   
        <MudTextField Label="Icon"
                      @bind-Value="Social.Icon" For="@(() => Social.Icon)" />
    


    <MudButton Variant="Variant.Filled" OnClick="HandleAddSocial" Color="Color.Primary">Thêm</MudButton>
</div>
   
    <MudTable Items="@Socials" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Created At</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Icon</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Link">@context.Id</MudTd>
            <MudTd DataLabel="createdAt">@context.CreatedAt</MudTd>


            @if (_isEdit && context.Id == _socialId)
            {

                <MudTextField AutoFocus="true"
                              @bind-Value="context.SocialName" @onfocusout="@(async () => { await SocialServices.UpdateAsync(context); _isEdit = false; })" />
               
            }
            else
            {

                <MudTd DataLabel="Name">@context.SocialName </MudTd>
                <MudTd DataLabel="icon">@context.Icon</MudTd>
                <MudIconButton Class="float-right" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => { _isEdit = !_isEdit; _socialId = context.Id; })"></MudIconButton>

            }
        </RowTemplate>
    </MudTable>


@code {
    List<Social> Socials = new List<Social>();
    Social Social = new Social();
    int _socialId;
    bool _loading = true;
    bool _isEdit;
    string Social_name;

    private async Task HandleAddSocial()
    {
        await SocialServices.AddAsync(Social);
        Socials.Add(Social);
    }
    protected async override Task OnInitializedAsync()
    {
        Socials = await SocialServices.GetAllAsync();
        _loading = false; 
    }
}
