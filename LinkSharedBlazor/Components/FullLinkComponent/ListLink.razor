@page "/link/{UserId:int}"
@inject LinkServices LinkServices
@inject SocialServices SocialServices
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="d-flex">
        <MudItem xs="12" sm="6" md="4" Class="mr-2">
            <MudSelect T="int" Strict="true" OffsetY="true" Variant="Variant.Outlined" Label="SocialName" @bind-Value="@_link.SocialId">
                @foreach (var item in Socials)
                {
                    <MudSelectItem Value="@item.Id">@item.SocialName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" Class="mr-2">
            <MudTextField Label="Link" Variant="Variant.Outlined"
                          @bind-Value="_link.SocialLink" />
        </MudItem>
        <MudButton Size="Size.Small" Variant="Variant.Filled" OnClick="HandleAddLink" Color="Color.Primary">Thêm</MudButton>
    </div>
    @foreach (var item in Links)
    {
        @if (_isEdit && _socialId == item.SocialId)
        {
            <MudTextField Class="mb-3" AutoFocus="true" Variant="Variant.Outlined" FullWidth="true"
                          @bind-Value="item.SocialLink" @onfocusout="@(async()=> {await LinkServices.UpdateAsync(item); _isEdit = false; })" />
        }
        else
        {
<div class="row">
    <a href="@item.SocialLink" target="_blank" class="col-11">
        <MudButton Class="mb-3"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   FullWidth="true">
            @item.SocialNavigation.SocialName
        </MudButton>
    </a>
    <div class="col-1 d-flex">
        <MudIconButton  Icon="@Icons.Material.Filled.Edit" OnClick="@(()=> { _isEdit = !_isEdit; _socialId = item.SocialId; })">
        </MudIconButton>
        <MudIconButton  Icon="@Icons.Material.Filled.Delete" OnClick="@(async ()=> { _socialId = item.SocialId;
                                                                            await LinkServices.DeleteAsync(_socialId, UserId);
                                                                            Links.Remove(item);
                                                                            Socials.Add(await SocialServices.GetByIdAsync(_socialId));
                                                                        })">
        </MudIconButton>
    </div>

</div>
        }
    }
</div>

@code {
    [Parameter] public int UserId { get; set; }
    List<Social> Socials = new();
    List<Link> Links = new();
    Link _link = new();
    int _socialId;
    bool _isEdit;



    async Task HandleAddLink()
    {
        _link.UserId = UserId;
        await LinkServices.AddAsync(_link);
        Socials.Remove(Socials.FirstOrDefault(x => x.Id == _link.SocialId));
        Links.Add(_link);
        _link = new Link();
    }

    protected async override Task OnInitializedAsync()
    {

        Links = await LinkServices.GetByUserIdAsync(UserId);
        Socials = await SocialServices.GetAllAsync();
        foreach (var item in Links)
        {
            var social = Socials.FirstOrDefault(x => x.Id == item.SocialId);
            if (social != null)
            {
                Socials.Remove(social);
            }
        }
    }
}
